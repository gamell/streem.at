#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('streem:init');
const http = require('http');
const models = require('../models');
const throng = require('throng');
const WORKERS = process.env.WEB_CONCURRENCY || 1;

function start() {
  /**
   * Create HTTP server.
   */
  const server = http.createServer(app);

  /**
   * Helper functions
   */

  function normalizePort(val) {
    const p = parseInt(val, 10);
    if (isNaN(p)) {
      // named pipe
      return val;
    }
    if (p >= 0) {
      // port number
      return p;
    }
    return false;
  }

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const p = server.address().port;

    const bind = typeof p === 'string'
      ? `Pipe ${p}`
      : `Port ${p}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(`${bind} requires elevated privileges`);
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(`${bind} ris already in use`);
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
      ? `pipe ${addr}`
      : `port ${addr.port}`;
    debug(`Listening on ${bind}`);
  }

  /**
   * Get port from environment and store in Express.
   */

  const port = normalizePort(process.env.PORT || '8080');
  app.set('port', port);

  // Listen on provided port, on all network interfaces.
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  console.log(`Magic happens on port ${port}`);
}

// Sync DB just once, then start multiple servers
models.sequelize.sync().then(() => {
  // Concurrency config
  throng(start, {
    workers: WORKERS,
    lifetime: Infinity,
  });
});
